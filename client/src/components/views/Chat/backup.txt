 const exist = this.state.rooms[this.state.room.trim()] || false;
 

        if (!exist) {

            this.connection = new SimplePeer({ initiator: true, trickle: false })
            this.connection.on('signal', candidate => {

                if (this.state.isConnected) {
                    console.log('Signal cuando estÃ¡ connected')
                    const newData = {
                        ...this.state.currentSession,
                        firstUser: { id: this.state.userId, candidate }
                    }

                    console.log('newData !exist', newData);
                    this.setState({ currentSession: newData })


                    fb.getDbInstance()
                        .ref('rooms/' + newData.room)
                        .update(newData)

                } else {
                    const newRoom = {
                        room: this.state.room,
                        firstUser: { id: this.state.userId, candidate },
                        secondUser: { id: '', candidate: '' },
                        isFull: false
                    }

                    fb.getDbInstance()
                        .ref('rooms/' + this.state.room)
                        .set(newRoom)

                    this.setState({ currentSession: newRoom, initiator: true })
                }

            })

            this.connection.on('connect', () => {
                console.log('Is connected')
                this.connection.send('hola2')
                this.setState({ isConnected: true })
            })

            this.connection.on('data', data => {
                const message = new TextDecoder("utf-8").decode(data)
                console.log('data received: ', message)

            })

            this.connection.on('stream', stream => {

                const remoteVideo = document.querySelector('#remote-video')
                if ('srcObject' in remoteVideo) {
                    remoteVideo.srcObject = stream
                } else {
                    remoteVideo.src = window.URL.createObjectURL(stream)
                }

            })



        } else {
            // Updating an existing room 
            const otherPeer = exist.firstUser.candidate
            this.connection = new SimplePeer()
            this.connection.signal(otherPeer)
            this.connection.on('signal', candidate => {

                if (this.state.isConnected) {

                    const newData = {
                        ...exist,
                        secondUser: { id: this.state.userId, candidate }
                    }

                    this.setState({ currentSession: newData})

                    fb.getDbInstance()
                        .ref('rooms/' + newData.room)
                        .update(newData)

                } else {
                    const updated = {
                        ...exist,
                        secondUser: { id: this.state.userId, candidate },
                        isFull: true
                    }

                    fb.getDbInstance()
                        .ref('rooms/' + exist.room)
                        .update(updated)

                    this.setState({ currentSession: updated, initiator: false })
                }

            })

            this.connection.on('connect', () => {
                console.log('Is connected')
                this.connection.send('hola')
                this.setState({ isConnected: true })
            })

            this.connection.on('data', data => {
                const message = new TextDecoder("utf-8").decode(data)
                console.log('data received: ', message.user)

            })

            this.connection.on('negotiation', data => {
                console.log('algo pasa')
            })

            this.connection.on('stream', stream => {
                console.log('recibiendo stream desde otro peer')
                const remoteVideo = document.querySelector(classes.RemoteVideo)
                if ('srcObject' in remoteVideo) {
                    remoteVideo.srcObject = stream
                } else {
                    remoteVideo.src = window.URL.createObjectURL(stream)
                }
                remoteVideo.play()

            })
        }

